(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(86)),s={id:"01-es6",title:"ECMAScript 6 (ES6)",sidebar_label:"ECMAScript 6 (ES6)",slug:"/tutorials/es6"},l={unversionedId:"03-tutorials/01-es6",id:"03-tutorials/01-es6",isDocsHomePage:!1,title:"ECMAScript 6 (ES6)",description:"ECMAScript (ES) is a scripting language created to standardize JavaScript.",source:"@site/docs/03-tutorials/01-es6.md",slug:"/tutorials/es6",permalink:"/tutorials/es6",editUrl:"https://github.com/laurensk/docs.laurensk.at/edit/master/docs/docs/03-tutorials/01-es6.md",version:"current",sidebar_label:"ECMAScript 6 (ES6)",sidebar:"mainSidebar",previous:{title:"Your first Node/Express Backend",permalink:"/tutorials/node-backend"}},c=[{value:"Variables and Strings",id:"variables-and-strings",children:[]},{value:"Loops and Functions",id:"loops-and-functions",children:[]},{value:"Destructuring",id:"destructuring",children:[]},{value:"Rest &amp; Spread",id:"rest--spread",children:[]},{value:"Map &amp; Set",id:"map--set",children:[]},{value:"Promises",id:"promises",children:[]},{value:"That&#39;s all",id:"thats-all",children:[]}],i={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ECMAScript (ES) is a scripting language created to standardize JavaScript."),"\nSo, JavaScript and ES6 are kinda the same things but you can do lots of things which you can't do in plain JavaScript. ",Object(o.b)("strong",{parentName:"p"},"Let's have a look!")),Object(o.b)("h3",{id:"variables-and-strings"},"Variables and Strings"),Object(o.b)("h4",{id:"basic-info"},"Basic Info"),Object(o.b)("p",null,"As you may know, variables and strings are somehow important in programming. Why? Well, you can store data in them.\nAnd if the heading does sound weird to you, you're absolutely right, a string is basically a variable, but I just copied the heading from SoloLearn, so complain to them."),Object(o.b)("h4",{id:"var--let"},"var & let"),Object(o.b)("p",null,"In ES6, you can define variables with the ",Object(o.b)("strong",{parentName:"p"},"var")," or ",Object(o.b)("strong",{parentName:"p"},"let")," keyword. And, what's the difference. If you define a variable with ",Object(o.b)("strong",{parentName:"p"},"var"),", it will be made ",Object(o.b)("strong",{parentName:"p"},"globally accessible")," whereas ",Object(o.b)("strong",{parentName:"p"},"let")," keeps the variable accessible in the ",Object(o.b)("strong",{parentName:"p"},"current scope"),". What does this mean? Let's have a look!"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function varTest() {\n    var x = 1;\n    if (true) {\n        var x = 2; // same variable  \n        console.log(x); // 2  \n    }\n    console.log(x); // 2  \n}\n\nfunction letTest() {\n    let x = 1;\n    if (true) {\n        let x = 2; // different variable  \n        console.log(x); // 2  \n    }\n    console.log(x); // 1  \n}\n")),Object(o.b)("h4",{id:"const"},"const"),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"const")," keyword is even easier to understand.\nIt just defines a ",Object(o.b)("strong",{parentName:"p"},"constant"),". A constant cannot be modified and always has the same value (as long as the constant is used in the same context/scope). Why use constants? If you don't need to modify the value of variables, constants can improve performance massively, especially if you're developing a large application."),Object(o.b)("h4",{id:"template-literals"},"Template Literals"),Object(o.b)("p",null,"Template what? Maybe you're (like me) used to call this ",Object(o.b)("strong",{parentName:"p"},"String interpolation")," and it's basically a better and easier way to combine string."),Object(o.b)("p",null,"Instead of typing ",Object(o.b)("inlineCode",{parentName:"p"},"let msg = 'Welcome' + name + '!';")," you can use ",Object(o.b)("inlineCode",{parentName:"p"},"let msg = Welcome *${name}*!;")," in ES6."),Object(o.b)("h3",{id:"loops-and-functions"},"Loops and Functions"),Object(o.b)("h4",{id:"loops-in-es6"},"Loops in ES6"),Object(o.b)("p",null,"In ES6, you no longer have to use a traditional for-loop for many tasks, there are easier versions available now."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"To iterate over all keys of an object:")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let obj = {\n    a: 1,\n    b: 2,\n    c: 3\n};\nfor (let v in obj) {\n    console.log(v);\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"To iterate over all entries of an array")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'let list = ["x", "y", "z"];\nfor (let val of list) {\n    console.log(val);\n}\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note"),": Like in traditional JavaScript, I personally prefer to iterate over an array with array.forEach()..."),Object(o.b)("h4",{id:"arrow-functions"},"Arrow Functions"),Object(o.b)("p",null,"I love array functions. I really do!"),Object(o.b)("p",null,"So, instead of writing ..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function add(x, y) {\n    var sum = x + y;\n    console.log(sum);\n}\n")),Object(o.b)("p",null,"... you can now use ..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const add = (x, y) => {\n    let sum = x + y;\n    console.log(sum);\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"This is probably my favourite feature in ES6.")),Object(o.b)("h3",{id:"destructuring"},"Destructuring"),Object(o.b)("h4",{id:"array-destructuring"},"Array Destructuring"),Object(o.b)("p",null,"By using destructuring, you can unpack values from an array without doing it line for line. It's kinda like inline styles in HTML."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let arr = ['1', '2', '3'];\nlet [one, two, three] = arr;\n\nconsole.log(one); // 1\nconsole.log(two); // 2\nconsole.log(three); // 3\n")),Object(o.b)("h4",{id:"object-destructuring"},"Object Destructuring"),Object(o.b)("p",null,"Similar to Array destructuring, ",Object(o.b)("strong",{parentName:"p"},"Object destructuring")," unpacks properties into distinct variables."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let obj = {h: 100, s: true};\nlet {h,s} = obj;\n\nconsole.log(h); // 100\nconsole.log(s); // true\n")),Object(o.b)("h3",{id:"rest--spread"},"Rest & Spread"),Object(o.b)("h4",{id:"rest-parameters"},"Rest Parameters"),Object(o.b)("p",null,"Prior to ES6, if we wanted to pass a variable number of arguments to a function, we could use the ",Object(o.b)("strong",{parentName:"p"},"arguments")," object, an array-like object, to access the parameters passed to the function.",Object(o.b)("br",{parentName:"p"}),"\n","For example, let's write a function that checks if an array contains all the arguments passed:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function containsAll(arr) {\n    for (let k = 1; k < arguments.length; k++) {\n        let num = arguments[k];\n        if (arr.indexOf(num) === -1) {\n            return false;\n        }\n    }\n    return true;\n}\nlet x = [2, 4, 6, 7];\nconsole.log(containsAll(x, 2, 4, 7));\nconsole.log(containsAll(x, 6, 4, 9));\n")),Object(o.b)("h4",{id:"the-spread-operator"},"The Spread Operator"),Object(o.b)("p",null,"To combine multiple objects, ES6 provides a new and easier way to do so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let newArr = ['Three', 'Four'];  \nlet arr = ['One', 'Two', ...newArr, 'Five'];  \nconsole.log(arr);\n")),Object(o.b)("h3",{id:"map--set"},"Map & Set"),Object(o.b)("h4",{id:"map"},"Map"),Object(o.b)("p",null,"A ",Object(o.b)("strong",{parentName:"p"},"Map"),"  object can be used to hold ",Object(o.b)("strong",{parentName:"p"},"key/value")," pairs. A key or value in a map can be anything (objects and primitive values)."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let map = new Map([\n    ['k1', 'v1'],\n    ['k2', 'v2']\n]);\n\nconsole.log(map.size); // 2\n")),Object(o.b)("h4",{id:"set"},"Set"),Object(o.b)("p",null,"A ",Object(o.b)("strong",{parentName:"p"},"Set"),"  object can be used to hold ",Object(o.b)("strong",{parentName:"p"},"unique")," values (no repetitions are allowed).",Object(o.b)("br",{parentName:"p"}),"\n","A value in a set can be anything (objects and primitive values)."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let set = new Set([1, 2, 4, 2, 59, 9, 4, 9, 1]);\nconsole.log(set.size); // 5\n")),Object(o.b)("h3",{id:"promises"},"Promises"),Object(o.b)("p",null,"Instead of doing something like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'setTimeout(function() {\n    console.log("Work 1");\n    setTimeout(function() {\n        console.log("Work 2");\n    }, 1000);\n}, 1000);\nconsole.log("End");\n')),Object(o.b)("p",null,"You can use ",Object(o.b)("strong",{parentName:"p"},"Promises")," to make your code much cleaner:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'new Promise(function(resolve, reject) {\n    if (success)\n        resolve(result);\n    else\n        reject(Error("failure"));\n});\n')),Object(o.b)("p",null,"Then, you can use the ",Object(o.b)("strong",{parentName:"p"},"then")," feature to avoid callbacks and do something like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'function asyncFunc(work) {\n    return new Promise(function(resolve, reject) {\n        if (work === "")\n            reject(Error("Nothing"));\n        setTimeout(function() {\n            resolve(work);\n        }, 1000);\n    });\n}\n\nasyncFunc("Work 1") // Task 1\n    .then(function(result) {\n        console.log(result);\n        return asyncFunc("Work 2"); // Task 2\n    }, function(error) {\n        console.log(error);\n    })\n    .then(function(result) {\n        console.log(result);\n    }, function(error) {\n        console.log(error);\n    });\nconsole.log("End");\n')),Object(o.b)("h4",{id:"modules"},"Modules"),Object(o.b)("p",null,"With modules, you can split your project into multiple files to keep your codebase clean and organized."),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// lib/math.js\nexport let sum = (x, y) => {\n    return x + y;\n}\nexport let pi = 3.14;\n\n// app.js\nimport * as math from "lib/math"\nconsole.log(`2p = + ${math.sum(math.pi, math.pi)}`)\n')),Object(o.b)("h4",{id:"build-in-methods"},"Build-in Methods"),Object(o.b)("p",null,"ES6 also introduced new built-in methods to make several tasks easier. Here are the most common ones:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Array.",Object(o.b)("strong",{parentName:"li"},"find()")),Object(o.b)("li",{parentName:"ul"},"Array.",Object(o.b)("strong",{parentName:"li"},"findIndex()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"join()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"repeat()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"indexOf()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"startsWith()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"endsWith()")),Object(o.b)("li",{parentName:"ul"},"String.",Object(o.b)("strong",{parentName:"li"},"includes()"))),Object(o.b)("h3",{id:"thats-all"},"That's all"),Object(o.b)("p",null,"Thanks for reading my CheatSheet on ES6.\nI hope you could learn some awesome things!"))}b.isMDXComponent=!0}}]);